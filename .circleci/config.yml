version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0

executors:
  node:
    docker:
      - image: circleci/node:12.13

jobs:
  build-and-test:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install default-jre
            export AWS_ACCESS_KEY_ID=x && export AWS_SECRET_ACCESS_KEY=x
            npm i
            ./node_modules/serverless/bin/serverless.js dynamodb install
            sudo apt-get install libxss1
      - run:
          name: Run linting
          command: npm run lint
      - run:
          name: Run unit tests
          command: npm run unit-test -- --ci
      - run:
          name: Run tests
          command: |
            echo -e "/common/hackney-jwt-secret=my_secret\n/common/customer-jwt-secret=my_secret" >> .env
            npm run ci

  deploy:
    executor: node
    parameters:
      stage_name:
        type: string
      AWS_ACCESS_KEY_ID:
        type: env_var_name
      AWS_SECRET_ACCESS_KEY:
        type: env_var_name
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: << parameters.AWS_ACCESS_KEY_ID >>
          aws-secret-access-key: << parameters.AWS_SECRET_ACCESS_KEY >>
          aws-region: AWS_REGION
      - run:
          name: Install serverless
          command: sudo npm i -g serverless
      - run:
          name: Install dependencies
          command: npm i --production
      - run:
          name: Npm prune
          command: npm prune --production
      - run:
          name: Deploy application
          command: sls deploy -s << parameters.stage_name >>

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-test
      - deploy:
          name: deploy-staging
          # context: api-assume-role-production-context
          AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID_STAGING
          AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY_STAGING
          stage_name: staging
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging
      - deploy:
          name: deploy-production
          # context: api-assume-role-production-context
          stage_name: production
          AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID_PRODUCTION
          AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY_PRODUCTION
          requires:
            - permit-deploy-production
